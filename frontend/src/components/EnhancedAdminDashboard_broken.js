import React, { useState, useEffect } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '@/components/ui/table';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport axios from 'axios';\nimport { \n  Users, \n  Car, \n  DollarSign, \n  TrendingUp, \n  Activity, \n  Shield,\n  Search,\n  Filter,\n  Edit,\n  Eye,\n  AlertTriangle,\n  CheckCircle,\n  RefreshCw,\n  Download,\n  Calendar,\n  Clock,\n  UserX,\n  FileText,\n  Settings\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nconst API_URL = process.env.REACT_APP_BACKEND_URL;\n\nconst EnhancedAdminDashboard = () => {\n  const { user } = useAuth();\n  const [loading, setLoading] = useState(true);\n  const [refreshing, setRefreshing] = useState(false);\n  \n  // Data states\n  const [stats, setStats] = useState({});\n  const [users, setUsers] = useState([]);\n  const [rides, setRides] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [auditLogs, setAuditLogs] = useState([]);\n  const [auditStats, setAuditStats] = useState({});\n  \n  // Filter states\n  const [userFilters, setUserFilters] = useState({\n    search: '',\n    role: '',\n    status: '',\n    limit: 50,\n    offset: 0\n  });\n  \n  const [rideFilters, setRideFilters] = useState({\n    search: '',\n    status: '',\n    limit: 50,\n    offset: 0\n  });\n  \n  const [paymentFilters, setPaymentFilters] = useState({\n    search: '',\n    status: '',\n    limit: 50,\n    offset: 0\n  });\n  \n  const [auditFilters, setAuditFilters] = useState({\n    search: '',\n    action: '',\n    entity_type: '',\n    severity: '',\n    limit: 50,\n    offset: 0\n  });\n  \n  // Edit states\n  const [editingUser, setEditingUser] = useState(null);\n  const [editingRide, setEditingRide] = useState(null);\n  const [editingPayment, setEditingPayment] = useState(null);\n  const [selectedAuditLog, setSelectedAuditLog] = useState(null);\n  \n  // Form states\n  const [userUpdateForm, setUserUpdateForm] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    is_verified: false,\n    rating: 5.0,\n    status: 'active',\n    admin_notes: ''\n  });\n  \n  const [suspensionForm, setSuspensionForm] = useState({\n    reason: '',\n    duration_days: ''\n  });\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    setRefreshing(true);\n    try {\n      await Promise.all([\n        fetchPlatformStats(),\n        fetchUsersWithFilters(),\n        fetchRidesWithFilters(),\n        fetchPaymentsWithFilters(),\n        fetchAuditLogs(),\n        fetchAuditStatistics()\n      ]);\n    } catch (error) {\n      console.error('Error fetching admin data:', error);\n      toast.error('Failed to load dashboard data');\n    } finally {\n      setLoading(false);\n      setRefreshing(false);\n    }\n  };\n\n  const fetchPlatformStats = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/admin/stats`);\n      setStats(response.data);\n    } catch (error) {\n      console.error('Error fetching platform stats:', error);\n    }\n  };\n\n  const fetchUsersWithFilters = async (filters = userFilters) => {\n    try {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== '' && value !== null && value !== undefined) {\n          params.append(key, value);\n        }\n      });\n      \n      const response = await axios.get(`${API_URL}/api/admin/users/filtered?${params}`);\n      setUsers(response.data.users || []);\n    } catch (error) {\n      console.error('Error fetching users:', error);\n    }\n  };\n\n  const fetchRidesWithFilters = async (filters = rideFilters) => {\n    try {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== '' && value !== null && value !== undefined) {\n          params.append(key, value);\n        }\n      });\n      \n      const response = await axios.get(`${API_URL}/api/admin/rides/filtered?${params}`);\n      setRides(response.data.rides || []);\n    } catch (error) {\n      console.error('Error fetching rides:', error);\n    }\n  };\n\n  const fetchPaymentsWithFilters = async (filters = paymentFilters) => {\n    try {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== '' && value !== null && value !== undefined) {\n          params.append(key, value);\n        }\n      });\n      \n      const response = await axios.get(`${API_URL}/api/admin/payments/filtered?${params}`);\n      setPayments(response.data.payments || []);\n    } catch (error) {\n      console.error('Error fetching payments:', error);\n    }\n  };\n\n  const fetchAuditLogs = async (filters = auditFilters) => {\n    try {\n      const params = new URLSearchParams();\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== '' && value !== null && value !== undefined) {\n          params.append(key, value);\n        }\n      });\n      \n      const response = await axios.get(`${API_URL}/api/audit/logs?${params}`);\n      setAuditLogs(response.data || []);\n    } catch (error) {\n      console.error('Error fetching audit logs:', error);\n    }\n  };\n\n  const fetchAuditStatistics = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/audit/statistics`);\n      setAuditStats(response.data);\n    } catch (error) {\n      console.error('Error fetching audit statistics:', error);\n    }\n  };\n\n  const handleUpdateUser = async () => {\n    if (!editingUser) return;\n    \n    try {\n      const params = new URLSearchParams();\n      Object.entries(userUpdateForm).forEach(([key, value]) => {\n        if (value !== '' && value !== null && value !== undefined) {\n          params.append(key, value);\n        }\n      });\n      \n      await axios.put(`${API_URL}/api/admin/users/${editingUser.id}/update?${params}`);\n      toast.success('User updated successfully');\n      setEditingUser(null);\n      fetchUsersWithFilters();\n      fetchAuditLogs(); // Refresh audit logs\n    } catch (error) {\n      console.error('Error updating user:', error);\n      toast.error('Failed to update user');\n    }\n  };\n\n  const handleSuspendUser = async (userId) => {\n    if (!suspensionForm.reason) {\n      toast.error('Please provide a suspension reason');\n      return;\n    }\n    \n    try {\n      const params = new URLSearchParams();\n      params.append('reason', suspensionForm.reason);\n      if (suspensionForm.duration_days) {\n        params.append('duration_days', suspensionForm.duration_days);\n      }\n      \n      await axios.post(`${API_URL}/api/admin/users/${userId}/suspend?${params}`);\n      toast.success('User suspended successfully');\n      setSuspensionForm({ reason: '', duration_days: '' });\n      fetchUsersWithFilters();\n      fetchAuditLogs(); // Refresh audit logs\n    } catch (error) {\n      console.error('Error suspending user:', error);\n      toast.error('Failed to suspend user');\n    }\n  };\n\n  const openEditUser = (user) => {\n    setEditingUser(user);\n    setUserUpdateForm({\n      name: user.name || '',\n      email: user.email || '',\n      phone: user.phone || '',\n      is_verified: user.is_verified || false,\n      rating: user.rating || 5.0,\n      status: user.status || 'active',\n      admin_notes: ''\n    });\n  };\n\n  const exportAuditLogs = async () => {\n    try {\n      const response = await axios.get(`${API_URL}/api/audit/logs?limit=1000`);\n      const logs = response.data;\n      \n      const csvContent = [\n        'Timestamp,Action,User ID,Entity Type,Entity ID,Severity,IP Address,User Agent',\n        ...logs.map(log => [\n          new Date(log.timestamp).toISOString(),\n          log.action,\n          log.user_id || '',\n          log.entity_type,\n          log.entity_id || '',\n          log.severity,\n          log.ip_address || '',\n          log.user_agent || ''\n        ].join(','))\n      ].join('\\n');\n      \n      const blob = new Blob([csvContent], { type: 'text/csv' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `audit_logs_${new Date().toISOString().split('T')[0]}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast.success('Audit logs exported successfully');\n    } catch (error) {\n      console.error('Error exporting audit logs:', error);\n      toast.error('Failed to export audit logs');\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status?.toLowerCase()) {\n      case 'completed':\n      case 'active':\n      case 'paid':\n        return 'bg-green-100 text-green-800';\n      case 'in_progress':\n      case 'pending':\n        return 'bg-blue-100 text-blue-800';\n      case 'suspended':\n      case 'cancelled':\n        return 'bg-red-100 text-red-800';\n      case 'failed':\n        return 'bg-red-100 text-red-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getSeverityColor = (severity) => {\n    switch (severity?.toLowerCase()) {\n      case 'critical':\n        return 'bg-red-100 text-red-800';\n      case 'high':\n        return 'bg-orange-100 text-orange-800';\n      case 'medium':\n        return 'bg-yellow-100 text-yellow-800';\n      case 'low':\n      case 'info':\n        return 'bg-blue-100 text-blue-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center space-y-4\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto\"></div>\n          <p className=\"text-gray-600\">Loading enhanced admin dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\" data-testid=\"enhanced-admin-dashboard\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 flex items-center space-x-2\">\n                <Shield className=\"h-8 w-8 text-purple-600\" />\n                <span>Enhanced Admin Dashboard</span>\n              </h1>\n              <p className=\"text-gray-600 mt-1\">\n                Comprehensive platform management with audit trails\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                onClick={exportAuditLogs}\n                variant=\"outline\"\n                className=\"flex items-center space-x-2\"\n              >\n                <Download className=\"h-4 w-4\" />\n                <span>Export Audit Logs</span>\n              </Button>\n              <Button \n                onClick={fetchAllData}\n                disabled={refreshing}\n                variant=\"outline\"\n                className=\"flex items-center space-x-2\"\n              >\n                <RefreshCw className={`h-4 w-4 ${refreshing ? 'animate-spin' : ''}`} />\n                <span>Refresh All</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Enhanced Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-8\">\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{stats.total_users || 0}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Total Rides</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{stats.total_rides || 0}</p>\n                </div>\n                <Car className=\"h-8 w-8 text-emerald-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Revenue</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">${stats.total_revenue || 0}</p>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Online Drivers</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{stats.online_drivers || 0}</p>\n                </div>\n                <Activity className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"card-hover\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">Audit Logs</p>\n                  <p className=\"text-3xl font-bold text-gray-900\">{auditStats.total_audit_logs || 0}</p>\n                </div>\n                <FileText className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Enhanced Tabs with Audit Information */}\n        <Tabs defaultValue=\"users\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"users\">User Management</TabsTrigger>\n            <TabsTrigger value=\"rides\">Ride Monitoring</TabsTrigger>\n            <TabsTrigger value=\"payments\">Payment Control</TabsTrigger>\n            <TabsTrigger value=\"audit\">Audit Trail</TabsTrigger>\n            <TabsTrigger value=\"analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          {/* Enhanced User Management Tab */}\n          <TabsContent value=\"users\" className=\"space-y-6\">\n            <Card className=\"card-hover\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>User Management & Control</CardTitle>\n                    <CardDescription>\n                      Comprehensive user administration with audit trails\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      placeholder=\"Search users...\"\n                      value={userFilters.search}\n                      onChange={(e) => setUserFilters({...userFilters, search: e.target.value})}\n                      className=\"w-64\"\n                    />\n                    <Select value={userFilters.role} onValueChange={(value) => setUserFilters({...userFilters, role: value})}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue placeholder=\"Role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All Roles</SelectItem>\n                        <SelectItem value=\"rider\">Rider</SelectItem>\n                        <SelectItem value=\"driver\">Driver</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Button onClick={() => fetchUsersWithFilters()}>\n                      <Search className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>User</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Rating</TableHead>\n                        <TableHead>Verified</TableHead>\n                        <TableHead>Joined</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {users.map((user) => (\n                        <TableRow key={user.id}>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{user.name}</div>\n                              <div className=\"text-sm text-gray-500\">{user.email}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={user.role === 'admin' ? 'bg-purple-100 text-purple-800' : user.role === 'driver' ? 'bg-blue-100 text-blue-800' : 'bg-green-100 text-green-800'}>\n                              {user.role}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge className={getStatusColor(user.status)}>\n                              {user.status || 'active'}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>{user.rating || 5.0}</TableCell>\n                          <TableCell>\n                            {user.is_verified ? (\n                              <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                            ) : (\n                              <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />\n                            )}\n                          </TableCell>\n                          <TableCell>{formatDate(user.created_at)}</TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => openEditUser(user)}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <UserX className=\"h-4 w-4\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent>\n                                  <DialogHeader>\n                                    <DialogTitle>Suspend User</DialogTitle>\n                                    <DialogDescription>\n                                      Suspend {user.name}'s account\n                                    </DialogDescription>\n                                  </DialogHeader>\n                                  <div className=\"space-y-4\">\n                                    <div>\n                                      <Label>Reason for Suspension</Label>\n                                      <Textarea\n                                        value={suspensionForm.reason}\n                                        onChange={(e) => setSuspensionForm({...suspensionForm, reason: e.target.value})}\n                                        placeholder=\"Explain why this user is being suspended...\"\n                                      />\n                                    </div>\n                                    <div>\n                                      <Label>Duration (days) - Optional</Label>\n                                      <Input\n                                        type=\"number\"\n                                        value={suspensionForm.duration_days}\n                                        onChange={(e) => setSuspensionForm({...suspensionForm, duration_days: e.target.value})}\n                                        placeholder=\"Leave empty for indefinite\"\n                                      />\n                                    </div>\n                                    <Button\n                                      onClick={() => handleSuspendUser(user.id)}\n                                      className=\"w-full\"\n                                      variant=\"destructive\"\n                                    >\n                                      Suspend User\n                                    </Button>\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* User Edit Dialog */}\n            <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Edit User: {editingUser?.name}</DialogTitle>\n                  <DialogDescription>\n                    Modify user details with full audit trail\n                  </DialogDescription>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Name</Label>\n                    <Input\n                      value={userUpdateForm.name}\n                      onChange={(e) => setUserUpdateForm({...userUpdateForm, name: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label>Email</Label>\n                    <Input\n                      value={userUpdateForm.email}\n                      onChange={(e) => setUserUpdateForm({...userUpdateForm, email: e.target.value})}\n                    />\n                  </div>\n                  <div>\n                    <Label>Rating</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"5\"\n                      step=\"0.1\"\n                      value={userUpdateForm.rating}\n                      onChange={(e) => setUserUpdateForm({...userUpdateForm, rating: parseFloat(e.target.value)})}\n                    />\n                  </div>\n                  <div>\n                    <Label>Status</Label>\n                    <Select value={userUpdateForm.status} onValueChange={(value) => setUserUpdateForm({...userUpdateForm, status: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                        <SelectItem value=\"suspended\">Suspended</SelectItem>\n                        <SelectItem value=\"banned\">Banned</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label>Admin Notes</Label>\n                    <Textarea\n                      value={userUpdateForm.admin_notes}\n                      onChange={(e) => setUserUpdateForm({...userUpdateForm, admin_notes: e.target.value})}\n                      placeholder=\"Add notes about this modification...\"\n                    />\n                  </div>\n                  <Button onClick={handleUpdateUser} className=\"w-full\">\n                    Update User\n                  </Button>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </TabsContent>\n\n          {/* Enhanced Audit Trail Tab */}\n          <TabsContent value=\"audit\" className=\"space-y-6\">\n            <Card className=\"card-hover\">\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle>Comprehensive Audit Trail</CardTitle>\n                    <CardDescription>\n                      Complete immutable record of all platform activities\n                    </CardDescription>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      placeholder=\"Search audit logs...\"\n                      value={auditFilters.search}\n                      onChange={(e) => setAuditFilters({...auditFilters, search: e.target.value})}\n                      className=\"w-48\"\n                    />\n                    <Select value={auditFilters.severity} onValueChange={(value) => setAuditFilters({...auditFilters, severity: value})}>\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue placeholder=\"Severity\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">All</SelectItem>\n                        <SelectItem value=\"critical\">Critical</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <Button onClick={() => fetchAuditLogs()}>\n                      <Search className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {/* Audit Statistics Summary */}\n                  <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <FileText className=\"h-5 w-5 text-blue-600\" />\n                        <div>\n                          <p className=\"text-sm text-blue-600\">Total Logs</p>\n                          <p className=\"text-xl font-bold text-blue-900\">{auditStats.total_audit_logs || 0}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-green-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Activity className=\"h-5 w-5 text-green-600\" />\n                        <div>\n                          <p className=\"text-sm text-green-600\">Recent (24h)</p>\n                          <p className=\"text-xl font-bold text-green-900\">{auditStats.recent_activity_24h || 0}</p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-orange-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <AlertTriangle className=\"h-5 w-5 text-orange-600\" />\n                        <div>\n                          <p className=\"text-sm text-orange-600\">High Severity</p>\n                          <p className=\"text-xl font-bold text-orange-900\">\n                            {auditStats.severity_distribution?.find(s => s._id === 'high')?.count || 0}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"bg-red-50 p-4 rounded-lg\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Shield className=\"h-5 w-5 text-red-600\" />\n                        <div>\n                          <p className=\"text-sm text-red-600\">Critical</p>\n                          <p className=\"text-xl font-bold text-red-900\">\n                            {auditStats.severity_distribution?.find(s => s._id === 'critical')?.count || 0}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Audit Logs Table */}\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Timestamp</TableHead>\n                          <TableHead>Action</TableHead>\n                          <TableHead>User</TableHead>\n                          <TableHead>Entity</TableHead>\n                          <TableHead>Severity</TableHead>\n                          <TableHead>IP Address</TableHead>\n                          <TableHead>Details</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {auditLogs.map((log) => (\n                          <TableRow key={log.id}>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Clock className=\"h-4 w-4 text-gray-400\" />\n                                <span className=\"text-sm\">{formatDate(log.timestamp)}</span>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">{log.action}</Badge>\n                            </TableCell>\n                            <TableCell>\n                              {log.user_id ? (\n                                <span className=\"text-sm font-mono\">{log.user_id.slice(-8)}</span>\n                              ) : (\n                                <span className=\"text-gray-400\">System</span>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"text-sm font-medium\">{log.entity_type}</div>\n                                {log.entity_id && (\n                                  <div className=\"text-xs text-gray-500 font-mono\">{log.entity_id.slice(-8)}</div>\n                                )}\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge className={getSeverityColor(log.severity)}>\n                                {log.severity}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <span className=\"text-sm font-mono\">{log.ip_address || 'N/A'}</span>\n                            </TableCell>\n                            <TableCell>\n                              <Dialog>\n                                <DialogTrigger asChild>\n                                  <Button variant=\"outline\" size=\"sm\">\n                                    <Eye className=\"h-4 w-4\" />\n                                  </Button>\n                                </DialogTrigger>\n                                <DialogContent className=\"max-w-2xl\">\n                                  <DialogHeader>\n                                    <DialogTitle>Audit Log Details</DialogTitle>\n                                    <DialogDescription>\n                                      Complete audit trail information\n                                    </DialogDescription>\n                                  </DialogHeader>\n                                  <div className=\"space-y-4\">\n                                    <div className=\"grid grid-cols-2 gap-4\">\n                                      <div>\n                                        <Label>Action</Label>\n                                        <p className=\"text-sm\">{log.action}</p>\n                                      </div>\n                                      <div>\n                                        <Label>Timestamp</Label>\n                                        <p className=\"text-sm\">{new Date(log.timestamp).toLocaleString()}</p>\n                                      </div>\n                                      <div>\n                                        <Label>User ID</Label>\n                                        <p className=\"text-sm font-mono\">{log.user_id || 'N/A'}</p>\n                                      </div>\n                                      <div>\n                                        <Label>Severity</Label>\n                                        <Badge className={getSeverityColor(log.severity)}>{log.severity}</Badge>\n                                      </div>\n                                    </div>\n                                    {log.old_data && (\n                                      <div>\n                                        <Label>Previous Data</Label>\n                                        <pre className=\"text-xs bg-gray-100 p-3 rounded mt-1 overflow-auto max-h-32\">\n                                          {JSON.stringify(log.old_data, null, 2)}\n                                        </pre>\n                                      </div>\n                                    )}\n                                    {log.new_data && (\n                                      <div>\n                                        <Label>New Data</Label>\n                                        <pre className=\"text-xs bg-gray-100 p-3 rounded mt-1 overflow-auto max-h-32\">\n                                          {JSON.stringify(log.new_data, null, 2)}\n                                        </pre>\n                                      </div>\n                                    )}\n                                    {log.metadata && (\n                                      <div>\n                                        <Label>Metadata</Label>\n                                        <pre className=\"text-xs bg-gray-100 p-3 rounded mt-1 overflow-auto max-h-32\">\n                                          {JSON.stringify(log.metadata, null, 2)}\n                                        </pre>\n                                      </div>\n                                    )}\n                                  </div>\n                                </DialogContent>\n                              </Dialog>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Other tabs would continue with similar enhancements... */}\n        </Tabs>\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedAdminDashboard;"